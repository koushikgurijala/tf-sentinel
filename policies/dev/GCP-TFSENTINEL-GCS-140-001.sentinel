# This policy uses the Sentinel tfplan/v2 import to require that
# specified GCP resources have all mandatory labels

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan

# Import gcp-functions/gcp-functions.sentinel
# with alias "gcp"
import "gcp-functions" as gcp

metadata = {
      "version": "1.0.0",
      "category": "GCS",
      "priority": "High",
      "customComplianceCacRef": "GCPPLAT-GAR-03",
      "createdBy": "td-cac-team",
      "policyDescription": "Ensure Infrastructure as Code (IaC) must be tagged appropriately",
      "policyName": "GCP-TFSENTINEL-GCS-140-001.sentinel",
}

# List of GCP resources that are required to have name/value labels.
param resource_types default [
  "google_project",
  "google_compute_instance",
  "google_storage_bucket",
  #"google_artifact_registry_repository",
]

param cluster_resource_types default [
  "google_container_cluster",
  "google_container_node_pool",
]

# List of mandatory labels
param mandatory_labels default [
  "appname",
  "malcode",
]


# Get all GCP Resources with standard labels
allGCPResourcesWithStandardLabels =
                        gcp.find_resources_with_standard_labels(resource_types)

# Get all GKE Resources with standard labels
allGKEResourcesWithStandardLabels =
                        gcp.find_resources_with_standard_labels(cluster_resource_types)                      

# Filter to GCP resources with violations using list of resources
# Warnings will be printed for all violations since the last parameter is true
violatingGCPResources =
      plan.filter_attribute_not_contains_list(allGCPResourcesWithStandardLabels,
                    "labels", mandatory_labels, true)

# Filter to GKE resources with violations using list of resources
# Warnings will be printed for all violations since the last parameter is true
violatingGKEResources =
      plan.filter_attribute_not_contains_list(allGKEResourcesWithStandardLabels,
                    "node_config.0.labels", mandatory_labels, true)

applicableGCPResources = length(allGCPResourcesWithStandardLabels)
applicableGKEResources = length(allGKEResourcesWithStandardLabels)

GCPResourcesValidated = length(violatingGCPResources["messages"]) is 0 or
  applicableGCPResources is 0

GKEResourcesValidated = length(violatingGKEResources["messages"]) is 0 or
  applicableGKEResources is 0

# Main rule
main = rule {
  
  GCPResourcesValidated and GKEResourcesValidated
}